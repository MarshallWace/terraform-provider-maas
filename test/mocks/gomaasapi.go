// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/gomaasapi (interfaces: Machine,Controller)

// Package mock_gomaasapi is a generated GoMock package.
package mock_gomaasapi

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	set "github.com/juju/collections/set"
	gomaasapi "github.com/juju/gomaasapi"
)

// MockMachine is a mock of Machine interface.
type MockMachine struct {
	ctrl     *gomock.Controller
	recorder *MockMachineMockRecorder
}

// MockMachineMockRecorder is the mock recorder for MockMachine.
type MockMachineMockRecorder struct {
	mock *MockMachine
}

// NewMockMachine creates a new mock instance.
func NewMockMachine(ctrl *gomock.Controller) *MockMachine {
	mock := &MockMachine{ctrl: ctrl}
	mock.recorder = &MockMachineMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMachine) EXPECT() *MockMachineMockRecorder {
	return m.recorder
}

// Architecture mocks base method.
func (m *MockMachine) Architecture() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Architecture")
	ret0, _ := ret[0].(string)
	return ret0
}

// Architecture indicates an expected call of Architecture.
func (mr *MockMachineMockRecorder) Architecture() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Architecture", reflect.TypeOf((*MockMachine)(nil).Architecture))
}

// BlockDevice mocks base method.
func (m *MockMachine) BlockDevice(arg0 int) gomaasapi.BlockDevice {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BlockDevice", arg0)
	ret0, _ := ret[0].(gomaasapi.BlockDevice)
	return ret0
}

// BlockDevice indicates an expected call of BlockDevice.
func (mr *MockMachineMockRecorder) BlockDevice(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BlockDevice", reflect.TypeOf((*MockMachine)(nil).BlockDevice), arg0)
}

// BlockDevices mocks base method.
func (m *MockMachine) BlockDevices() []gomaasapi.BlockDevice {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BlockDevices")
	ret0, _ := ret[0].([]gomaasapi.BlockDevice)
	return ret0
}

// BlockDevices indicates an expected call of BlockDevices.
func (mr *MockMachineMockRecorder) BlockDevices() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BlockDevices", reflect.TypeOf((*MockMachine)(nil).BlockDevices))
}

// BootInterface mocks base method.
func (m *MockMachine) BootInterface() gomaasapi.Interface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BootInterface")
	ret0, _ := ret[0].(gomaasapi.Interface)
	return ret0
}

// BootInterface indicates an expected call of BootInterface.
func (mr *MockMachineMockRecorder) BootInterface() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BootInterface", reflect.TypeOf((*MockMachine)(nil).BootInterface))
}

// CPUCount mocks base method.
func (m *MockMachine) CPUCount() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CPUCount")
	ret0, _ := ret[0].(int)
	return ret0
}

// CPUCount indicates an expected call of CPUCount.
func (mr *MockMachineMockRecorder) CPUCount() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CPUCount", reflect.TypeOf((*MockMachine)(nil).CPUCount))
}

// CreateDevice mocks base method.
func (m *MockMachine) CreateDevice(arg0 gomaasapi.CreateMachineDeviceArgs) (gomaasapi.Device, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDevice", arg0)
	ret0, _ := ret[0].(gomaasapi.Device)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDevice indicates an expected call of CreateDevice.
func (mr *MockMachineMockRecorder) CreateDevice(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDevice", reflect.TypeOf((*MockMachine)(nil).CreateDevice), arg0)
}

// Devices mocks base method.
func (m *MockMachine) Devices(arg0 gomaasapi.DevicesArgs) ([]gomaasapi.Device, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Devices", arg0)
	ret0, _ := ret[0].([]gomaasapi.Device)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Devices indicates an expected call of Devices.
func (mr *MockMachineMockRecorder) Devices(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Devices", reflect.TypeOf((*MockMachine)(nil).Devices), arg0)
}

// DistroSeries mocks base method.
func (m *MockMachine) DistroSeries() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DistroSeries")
	ret0, _ := ret[0].(string)
	return ret0
}

// DistroSeries indicates an expected call of DistroSeries.
func (mr *MockMachineMockRecorder) DistroSeries() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DistroSeries", reflect.TypeOf((*MockMachine)(nil).DistroSeries))
}

// FQDN mocks base method.
func (m *MockMachine) FQDN() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FQDN")
	ret0, _ := ret[0].(string)
	return ret0
}

// FQDN indicates an expected call of FQDN.
func (mr *MockMachineMockRecorder) FQDN() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FQDN", reflect.TypeOf((*MockMachine)(nil).FQDN))
}

// Hostname mocks base method.
func (m *MockMachine) Hostname() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Hostname")
	ret0, _ := ret[0].(string)
	return ret0
}

// Hostname indicates an expected call of Hostname.
func (mr *MockMachineMockRecorder) Hostname() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Hostname", reflect.TypeOf((*MockMachine)(nil).Hostname))
}

// IPAddresses mocks base method.
func (m *MockMachine) IPAddresses() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IPAddresses")
	ret0, _ := ret[0].([]string)
	return ret0
}

// IPAddresses indicates an expected call of IPAddresses.
func (mr *MockMachineMockRecorder) IPAddresses() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IPAddresses", reflect.TypeOf((*MockMachine)(nil).IPAddresses))
}

// Interface mocks base method.
func (m *MockMachine) Interface(arg0 int) gomaasapi.Interface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Interface", arg0)
	ret0, _ := ret[0].(gomaasapi.Interface)
	return ret0
}

// Interface indicates an expected call of Interface.
func (mr *MockMachineMockRecorder) Interface(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Interface", reflect.TypeOf((*MockMachine)(nil).Interface), arg0)
}

// InterfaceSet mocks base method.
func (m *MockMachine) InterfaceSet() []gomaasapi.Interface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InterfaceSet")
	ret0, _ := ret[0].([]gomaasapi.Interface)
	return ret0
}

// InterfaceSet indicates an expected call of InterfaceSet.
func (mr *MockMachineMockRecorder) InterfaceSet() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InterfaceSet", reflect.TypeOf((*MockMachine)(nil).InterfaceSet))
}

// Memory mocks base method.
func (m *MockMachine) Memory() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Memory")
	ret0, _ := ret[0].(int)
	return ret0
}

// Memory indicates an expected call of Memory.
func (mr *MockMachineMockRecorder) Memory() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Memory", reflect.TypeOf((*MockMachine)(nil).Memory))
}

// OperatingSystem mocks base method.
func (m *MockMachine) OperatingSystem() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OperatingSystem")
	ret0, _ := ret[0].(string)
	return ret0
}

// OperatingSystem indicates an expected call of OperatingSystem.
func (mr *MockMachineMockRecorder) OperatingSystem() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OperatingSystem", reflect.TypeOf((*MockMachine)(nil).OperatingSystem))
}

// OwnerData mocks base method.
func (m *MockMachine) OwnerData() map[string]string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OwnerData")
	ret0, _ := ret[0].(map[string]string)
	return ret0
}

// OwnerData indicates an expected call of OwnerData.
func (mr *MockMachineMockRecorder) OwnerData() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OwnerData", reflect.TypeOf((*MockMachine)(nil).OwnerData))
}

// Partition mocks base method.
func (m *MockMachine) Partition(arg0 int) gomaasapi.Partition {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Partition", arg0)
	ret0, _ := ret[0].(gomaasapi.Partition)
	return ret0
}

// Partition indicates an expected call of Partition.
func (mr *MockMachineMockRecorder) Partition(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Partition", reflect.TypeOf((*MockMachine)(nil).Partition), arg0)
}

// PhysicalBlockDevice mocks base method.
func (m *MockMachine) PhysicalBlockDevice(arg0 int) gomaasapi.BlockDevice {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PhysicalBlockDevice", arg0)
	ret0, _ := ret[0].(gomaasapi.BlockDevice)
	return ret0
}

// PhysicalBlockDevice indicates an expected call of PhysicalBlockDevice.
func (mr *MockMachineMockRecorder) PhysicalBlockDevice(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PhysicalBlockDevice", reflect.TypeOf((*MockMachine)(nil).PhysicalBlockDevice), arg0)
}

// PhysicalBlockDevices mocks base method.
func (m *MockMachine) PhysicalBlockDevices() []gomaasapi.BlockDevice {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PhysicalBlockDevices")
	ret0, _ := ret[0].([]gomaasapi.BlockDevice)
	return ret0
}

// PhysicalBlockDevices indicates an expected call of PhysicalBlockDevices.
func (mr *MockMachineMockRecorder) PhysicalBlockDevices() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PhysicalBlockDevices", reflect.TypeOf((*MockMachine)(nil).PhysicalBlockDevices))
}

// Pool mocks base method.
func (m *MockMachine) Pool() gomaasapi.Pool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Pool")
	ret0, _ := ret[0].(gomaasapi.Pool)
	return ret0
}

// Pool indicates an expected call of Pool.
func (mr *MockMachineMockRecorder) Pool() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Pool", reflect.TypeOf((*MockMachine)(nil).Pool))
}

// PowerState mocks base method.
func (m *MockMachine) PowerState() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PowerState")
	ret0, _ := ret[0].(string)
	return ret0
}

// PowerState indicates an expected call of PowerState.
func (mr *MockMachineMockRecorder) PowerState() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PowerState", reflect.TypeOf((*MockMachine)(nil).PowerState))
}

// SetOwnerData mocks base method.
func (m *MockMachine) SetOwnerData(arg0 map[string]string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetOwnerData", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetOwnerData indicates an expected call of SetOwnerData.
func (mr *MockMachineMockRecorder) SetOwnerData(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetOwnerData", reflect.TypeOf((*MockMachine)(nil).SetOwnerData), arg0)
}

// Start mocks base method.
func (m *MockMachine) Start(arg0 gomaasapi.StartArgs) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start.
func (mr *MockMachineMockRecorder) Start(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockMachine)(nil).Start), arg0)
}

// StatusMessage mocks base method.
func (m *MockMachine) StatusMessage() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StatusMessage")
	ret0, _ := ret[0].(string)
	return ret0
}

// StatusMessage indicates an expected call of StatusMessage.
func (mr *MockMachineMockRecorder) StatusMessage() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StatusMessage", reflect.TypeOf((*MockMachine)(nil).StatusMessage))
}

// StatusName mocks base method.
func (m *MockMachine) StatusName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StatusName")
	ret0, _ := ret[0].(string)
	return ret0
}

// StatusName indicates an expected call of StatusName.
func (mr *MockMachineMockRecorder) StatusName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StatusName", reflect.TypeOf((*MockMachine)(nil).StatusName))
}

// SystemID mocks base method.
func (m *MockMachine) SystemID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SystemID")
	ret0, _ := ret[0].(string)
	return ret0
}

// SystemID indicates an expected call of SystemID.
func (mr *MockMachineMockRecorder) SystemID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SystemID", reflect.TypeOf((*MockMachine)(nil).SystemID))
}

// Tags mocks base method.
func (m *MockMachine) Tags() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Tags")
	ret0, _ := ret[0].([]string)
	return ret0
}

// Tags indicates an expected call of Tags.
func (mr *MockMachineMockRecorder) Tags() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Tags", reflect.TypeOf((*MockMachine)(nil).Tags))
}

// Zone mocks base method.
func (m *MockMachine) Zone() gomaasapi.Zone {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Zone")
	ret0, _ := ret[0].(gomaasapi.Zone)
	return ret0
}

// Zone indicates an expected call of Zone.
func (mr *MockMachineMockRecorder) Zone() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Zone", reflect.TypeOf((*MockMachine)(nil).Zone))
}

// MockController is a mock of Controller interface.
type MockController struct {
	ctrl     *gomock.Controller
	recorder *MockControllerMockRecorder
}

// MockControllerMockRecorder is the mock recorder for MockController.
type MockControllerMockRecorder struct {
	mock *MockController
}

// NewMockController creates a new mock instance.
func NewMockController(ctrl *gomock.Controller) *MockController {
	mock := &MockController{ctrl: ctrl}
	mock.recorder = &MockControllerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockController) EXPECT() *MockControllerMockRecorder {
	return m.recorder
}

// AddFile mocks base method.
func (m *MockController) AddFile(arg0 gomaasapi.AddFileArgs) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddFile", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddFile indicates an expected call of AddFile.
func (mr *MockControllerMockRecorder) AddFile(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddFile", reflect.TypeOf((*MockController)(nil).AddFile), arg0)
}

// AllocateMachine mocks base method.
func (m *MockController) AllocateMachine(arg0 gomaasapi.AllocateMachineArgs) (gomaasapi.Machine, gomaasapi.ConstraintMatches, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllocateMachine", arg0)
	ret0, _ := ret[0].(gomaasapi.Machine)
	ret1, _ := ret[1].(gomaasapi.ConstraintMatches)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// AllocateMachine indicates an expected call of AllocateMachine.
func (mr *MockControllerMockRecorder) AllocateMachine(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllocateMachine", reflect.TypeOf((*MockController)(nil).AllocateMachine), arg0)
}

// BootResources mocks base method.
func (m *MockController) BootResources() ([]gomaasapi.BootResource, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BootResources")
	ret0, _ := ret[0].([]gomaasapi.BootResource)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BootResources indicates an expected call of BootResources.
func (mr *MockControllerMockRecorder) BootResources() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BootResources", reflect.TypeOf((*MockController)(nil).BootResources))
}

// Capabilities mocks base method.
func (m *MockController) Capabilities() set.Strings {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Capabilities")
	ret0, _ := ret[0].(set.Strings)
	return ret0
}

// Capabilities indicates an expected call of Capabilities.
func (mr *MockControllerMockRecorder) Capabilities() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Capabilities", reflect.TypeOf((*MockController)(nil).Capabilities))
}

// CreateDevice mocks base method.
func (m *MockController) CreateDevice(arg0 gomaasapi.CreateDeviceArgs) (gomaasapi.Device, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDevice", arg0)
	ret0, _ := ret[0].(gomaasapi.Device)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDevice indicates an expected call of CreateDevice.
func (mr *MockControllerMockRecorder) CreateDevice(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDevice", reflect.TypeOf((*MockController)(nil).CreateDevice), arg0)
}

// Devices mocks base method.
func (m *MockController) Devices(arg0 gomaasapi.DevicesArgs) ([]gomaasapi.Device, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Devices", arg0)
	ret0, _ := ret[0].([]gomaasapi.Device)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Devices indicates an expected call of Devices.
func (mr *MockControllerMockRecorder) Devices(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Devices", reflect.TypeOf((*MockController)(nil).Devices), arg0)
}

// Domains mocks base method.
func (m *MockController) Domains() ([]gomaasapi.Domain, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Domains")
	ret0, _ := ret[0].([]gomaasapi.Domain)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Domains indicates an expected call of Domains.
func (mr *MockControllerMockRecorder) Domains() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Domains", reflect.TypeOf((*MockController)(nil).Domains))
}

// Fabrics mocks base method.
func (m *MockController) Fabrics() ([]gomaasapi.Fabric, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Fabrics")
	ret0, _ := ret[0].([]gomaasapi.Fabric)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Fabrics indicates an expected call of Fabrics.
func (mr *MockControllerMockRecorder) Fabrics() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Fabrics", reflect.TypeOf((*MockController)(nil).Fabrics))
}

// Files mocks base method.
func (m *MockController) Files(arg0 string) ([]gomaasapi.File, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Files", arg0)
	ret0, _ := ret[0].([]gomaasapi.File)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Files indicates an expected call of Files.
func (mr *MockControllerMockRecorder) Files(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Files", reflect.TypeOf((*MockController)(nil).Files), arg0)
}

// GetFile mocks base method.
func (m *MockController) GetFile(arg0 string) (gomaasapi.File, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFile", arg0)
	ret0, _ := ret[0].(gomaasapi.File)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFile indicates an expected call of GetFile.
func (mr *MockControllerMockRecorder) GetFile(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFile", reflect.TypeOf((*MockController)(nil).GetFile), arg0)
}

// Machines mocks base method.
func (m *MockController) Machines(arg0 gomaasapi.MachinesArgs) ([]gomaasapi.Machine, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Machines", arg0)
	ret0, _ := ret[0].([]gomaasapi.Machine)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Machines indicates an expected call of Machines.
func (mr *MockControllerMockRecorder) Machines(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Machines", reflect.TypeOf((*MockController)(nil).Machines), arg0)
}

// Pools mocks base method.
func (m *MockController) Pools() ([]gomaasapi.Pool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Pools")
	ret0, _ := ret[0].([]gomaasapi.Pool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Pools indicates an expected call of Pools.
func (mr *MockControllerMockRecorder) Pools() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Pools", reflect.TypeOf((*MockController)(nil).Pools))
}

// ReleaseMachines mocks base method.
func (m *MockController) ReleaseMachines(arg0 gomaasapi.ReleaseMachinesArgs) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReleaseMachines", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReleaseMachines indicates an expected call of ReleaseMachines.
func (mr *MockControllerMockRecorder) ReleaseMachines(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReleaseMachines", reflect.TypeOf((*MockController)(nil).ReleaseMachines), arg0)
}

// Spaces mocks base method.
func (m *MockController) Spaces() ([]gomaasapi.Space, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Spaces")
	ret0, _ := ret[0].([]gomaasapi.Space)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Spaces indicates an expected call of Spaces.
func (mr *MockControllerMockRecorder) Spaces() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Spaces", reflect.TypeOf((*MockController)(nil).Spaces))
}

// StaticRoutes mocks base method.
func (m *MockController) StaticRoutes() ([]gomaasapi.StaticRoute, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StaticRoutes")
	ret0, _ := ret[0].([]gomaasapi.StaticRoute)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StaticRoutes indicates an expected call of StaticRoutes.
func (mr *MockControllerMockRecorder) StaticRoutes() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StaticRoutes", reflect.TypeOf((*MockController)(nil).StaticRoutes))
}

// Zones mocks base method.
func (m *MockController) Zones() ([]gomaasapi.Zone, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Zones")
	ret0, _ := ret[0].([]gomaasapi.Zone)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Zones indicates an expected call of Zones.
func (mr *MockControllerMockRecorder) Zones() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Zones", reflect.TypeOf((*MockController)(nil).Zones))
}
